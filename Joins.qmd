---
title: "Joins"
format: html
editor: visual
---

```{r}
#|label: setup
#|eecho: false
#|message: false
library(tidyverse)
library(nycflights13)
```

## Intro

-   datasett som er spredd over flere filer. Bruker en nøkkel/entydig ID som brukes når vi skal knytte sammen disse filene
    -   for eks. fødselsnummer
-   noen kan ha samme nøkkel, men bruke ulike navn/formatering på disse som kan gjøre det vanskelig å bruke denne nøkkelen selv om det er det samme som brukes

```{r}
#| paged.print: false
flights |>
  select(year:day, carrier, everything()) |>
  group_by(carrier) |> 
  summarise(first(dep_time)) |>
  head(, n= 3)
```

```{r}
flights <- nycflights13::flights
```

```{r}
flights |>
  select(carrier, everything())
```

-   nå skal vi joine to datasett
-   left_join
    -   tar noe fra høyre og legger inn i venstre. I dette tilfellet fra datasett airlines og inn i flights

```{r}
tmp <- left_join(flights, airlines, join_by(carrier))
tmp <- select(tmp, carrier, airline_name = name, everything())
```

-   vi gjør det samme bare i en pipe

```{r}
tmp <- flights |>
  left_join(airlines, join_by(carrier)) |>
  select(carrier, airline_name = name, everything())
```

-   under har vi et tilfelle der datasettene ikke har samme key (bytter om carrier til id for å få forskjell)

```{r}
airlines <- nycflights13::airlines |>
  rename(id = carrier)
```

```{r}
tmp <- flights |>
  left_join(airlines, join_by(carrier == id)) |>
  select(carrier, airline_name = name, everything())
```

```{r}
airports <- airports
```

```{r}
nyc_airports <- airports |>
  filter(faa %in% c('JFK', 'LGA', 'EWR'))
```

```{r}
flights |>
  select(origin, everything())
```

```{r}
airlines <- nycflights13::airlines
```

```{r}
flights <- flights |>
  left_join(airlines, join_by(carrier)) |>
  select(carrier, airline_name = name, everything())
```

-   under tar vi ut variabelnavnene i datasett flights og spør hvilke av disse navnene som også finnes i datasett planes
    -   når en gjør dette må en være obs på at to datasett kan ha like navn, men at det har ulik betydning (year i disse datasettene betyr i flights året flygningen var, i planes betyr det hvilket år flyet ble produsert. I eksemplet under endrer vi derfor også navnet på det ene året)

```{r}
nf <- names(flights)
nf[nf %in% names(planes)]
```

```{r}
flights <- nycflights13::flights
flights <- flights |>
  left_join(select(planes, year_man = year, everything()), join_by(tailnum))
```

```{r}
flights <- flights %>% 
  left_join(planes, by = "tailnum", 
            suffix = c("", "_plane"))

flights %>% 
  select(tailnum, model, 
         year_plane, year, everything()) %>% 
  head(n = 3)
```

-   nå skal vi joine med datasett origin og destination
-   først skjekker vi navnene i datasettene, dette må vi hensynta når vi joiner

```{r}
nmf <- names(flights)
nmf[nmf %in% names(airports)]
```

```{r}
head(flights$name, n = 4)
```

```{r}
head(airports$name, n = 4)
```

```{r}
flights <- flights %>% 
  left_join(airports, 
            by = c("origin" = "faa"), 
            suffix = c("_airline", "_origin_airport"), 
            keep = TRUE
            ) %>% 
  select(year:day, name_airline, name_origin_airport, everything())
head(flights, n = 3)
```

```{r}
#work with tmp until correct then 
#change to my_flights
flights <- flights %>% 
  left_join(airports, 
            by = c("dest" = "faa"),
            suffix = c("_origin", "_dest"),
            keep = FALSE
            ) %>% 
  rename(name_dest_airport = name) %>% 
  select(faa, origin, dest, lat_origin, lat_dest, everything())
#View(my_flights[1:50,])
```

```{r}
set.seed(666)
(x <- sample(flights$dep_time, size = 30))
```

-   nå skal vi fikse tidspunktene slik at alle klokkeslett har fire tall

```{r}
x <- str_pad(
  string = x,
  width = 4,
  side = "left",
  pad = "0"
)
x
```

-   nå skal vi plukke ut timene

```{r}
str_sub(x, start = 1, end = 2)
```

```{r}
fix_dep_time <- function(x) {
  x = str_pad(x, width = 4, side = "left", pad = "0")
  x = str_sub(x, start = 1, end = 2)
  x = as.integer(x)
  return(x)
  } + 1
```

```{r}
flights <- flights %>% 
  mutate(
    dep_time_hour = fix_dep_time(dep_time)
  )
```

```{r}
nmf <- names(flights)
nmf[nmf %in% names(weather)]
```

```{r}
flights <- flights %>% 
  left_join(weather, 
            by = c("origin", "year", "month", "day", "dep_time_hour" = "hour"),
            suffix = c("", "_weather"), 
            keep = FALSE
            )
```

```{r}
my_flights <- my_flights %>% 
  select(year, month, day, dep_time, everything()) %>% 
  print()
```

```{r}
flights <- flights %>% 
  select(year, month, day, dep_time, everything()) %>% 
  print(width = 5)
```

```{r}
#| paged.print = false
flights |>
  select(year:dep_time, temp:visib, everything())
```
