---
title: "programering"
format: html
editor: visual
---

```{r}
# get tidyverse to shut up
suppressPackageStartupMessages({
  library(tidyverse)
  library(lubridate)
  library(magrittr)
})
```

# Mer om pipes

-   i magrittr
    -   %\$% er en exploting pipes

```{r}
set.seed(333)
my_df <- tibble(
  x = rnorm(10, mean = 100, sd = 10),
  y = runif(10, min = 30, max = 130),
  z = rlnorm(10, 2, 2)
)
```

```{r}
set.seed(1234)
my_dates <- tibble(
  y = 1999:2008,
  m = sample(1:12, size = 10, replace = TRUE),
  # make it simple, seed 1234 gives no impossible date
  d = sample(1:31, size = 10, replace = TRUE),
  date = make_date(year = y, month = m, day = d)
)
```

## exploting pipe

-   vil få tilgang til variabelnavnet inni en dataframe/tibbel
    -   av og til vil en pipe "miste" variabelnavnet i en dataframe når en går nedover pipen

```{r}
args(cor)
```

```{r}
# cor can't find y
my_df %$% cor(x,y)
```

## T-pipes %T\>%

-   brukes dersom man for eksempel vil ha et plott mindt i en pipe
    -   dataen går inn i et plott, og samtidig får ned over til andre funksjoner

```{r}
my_df %>% 
  select(x,y) %T>% 
  plot() %>% 
  glimpse()
```

-   bør ikke brukes dersom man han mange innputt
-   en pipe bør ikke være for lang, heller bruker fere piper

# funksjoner

## input

-   når en skal lage funksjon, er det viktig med et navn. Gjerne et verb på funksjonen og substantiv på objekter som for eksempel tibbel

    -   x, y, z: vectors.

    ```{=html}
    <!-- -->
    ```
    -   w: a vector of weights.

    -   df: a data frame.

        -   Note df, density of F distribution, is a function in R package stats. Maybe my_df or a_df is better.

    -   i, j: numeric indices (typically rows and columns).

    -   n: length, or number of rows.

    -   p: number of columns.

    -   Match names of existing functions

        -   i.e. use na.rm for option to remove NAs, not rm.na, remove etc.

-   typisk har alle funksjoner data som førsteargument, alle andre agrument bør skrives fult ut

## output

-   det som kommer ut av funksjonen er som regel den siste statement i funksjonen
-   dersom man ikke vil at funksjonen skal printe, kan vi bruke invisebel( )
-   alt som er inni funksjonen er alle variabelen lokale
    -   dersom en variabel ikke er definert vil R de utenfor funksjonen

### betingelser

```{r}
my_verb <- function(x) {
  if(some condition on x) {
    do alternative 1
  } else if(another condition on x) {
    do alternative 2
  } else if(another condition on x) {
    do alternative 3
  } else {
    If none of the conditions is TRUE, do
    alternative 4
  }
}
```

-   det du skal gjøre står inni { }
-   dersom man trenger flere arbument, skiller vi disse med ,

## eksempel funksjon

```{r}
decide_number <- function(x) {
#  stopifnot(is.numeric(x) & length(x) == 1)
  if (x > 0) {
    paste(x, "is greater than zero")
  } else if (x < 0) {
    paste(x, "is less than zero")
  } else {
    paste(x, "is zero")
  }
}
```

```{r}
decide_number(-5)
```

```{r}
# her sier vi at dersom det ikke er tall som kommer inn, så må funksjonen stoppes
# og at det bare er et tall 
decide_number <- function(x) {
stopifnot(is.numeric(x) & length(x) == 1)
  if (x > 0) {
    paste(x, "is greater than zero")
  } else if (x < 0) {
    paste(x, "is less than zero")
  } else {
    paste(x, "is zero")
  }
}
```

```{r}
decide_number(10)
```

```{r}
decide_number(c(2, -5))
```

-   vi gjør noen endringer på funksjonen slik at den kan brukes på vektorer også

```{r}
decide_numvec <- function(x) {
  stopifnot(is.numeric(x))
  x_g = x > 0
  x_l = x < 0
  x_ans = case_when(
    x_g == TRUE~ paste(x, "is greater than zero"),
    x_l == TRUE ~ paste(x, "is less than zero"),
    !(x_g | x_l) == TRUE ~ paste(x, "is zero")
  )
  x_ans
}
```

```{r}
decide_numvec(c(10, -2, 0))
decide_numvec(15)
```
